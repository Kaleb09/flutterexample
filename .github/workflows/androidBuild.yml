# .github/workflows/android_release.yml

# This workflow is responsible for building, signing, and releasing
# your Android application on GitHub.

name: Android Release Build

# Controls when the workflow will run.
on:
  # This workflow is triggered on a push to a tag that matches the 'v*.*.*' pattern.
  # This is a common practice for creating releases (e.g., v1.0.0, v1.2.3-beta).
  push:
    tags:
      - 'v*.*.*' # Matches tags like v1.0.0, v1.0.1, v2.3.4, etc.

# A workflow run is made up of one or more jobs.
jobs:
  build_and_release:
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:
      # Step 1: Checkout the repository code.
      # This action checks out your repository under $GITHUB_WORKSPACE,
      # so your workflow can access it.
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Java Development Kit (JDK).
      # Android projects require Java to build. JDK 17 is commonly used for modern Android projects.
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # A popular OpenJDK distribution
          java-version: '17'      # Specify the JDK version required for your Android project

      # Step 3: Make the Gradle wrapper executable.
      # The gradlew script needs executable permissions to run on Linux runners.
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # Step 4: Build the Android application in release mode.
      # This action uses Gradle to build both the APK and Android App Bundle (AAB).
      # 'assembleRelease' builds the APK, 'bundleRelease' builds the AAB.
      # The 'gradle/gradle-build-action@v2' handles caching and proper Gradle setup.
      - name: Build release AAB and APK
        uses: gradle/gradle-build-action@v2
        with:
          arguments: assembleRelease bundleRelease

      # Step 5: Sign the Android release artifacts.
      # This action simplifies the process of signing your APK/AAB using your keystore
      # and credentials securely stored as GitHub Secrets.
      - name: Sign Android Release
        uses: r0adkll/sign-android-release@v1
        id: sign_app # Assign an ID to this step to reference its outputs later
        with:
          # Directory where the unsigned APK/AAB files are located.
          # Adjust this path if your project structure is different.
          releaseDirectory: app/build/outputs/bundle/release # Or app/build/outputs/apk/release for APKs only
          # Base64 encoded content of your Android keystore file (.jks or .keystore).
          signingKeyBase64: ${{ secrets.SIGNING_KEYSTORE_BASE64 }}
          # The alias of the key within your keystore.
          alias: ${{ secrets.SIGNING_KEY_ALIAS }}
          # The password for your keystore.
          keyStorePassword: ${{ secrets.SIGNING_KEYSTORE_PASSWORD }}
          # The password for the key within your keystore.
          keyPassword: ${{ secrets.SIGNING_KEY_PASSWORD }}

      # Step 6: Create a GitHub Release and upload signed artifacts.
      # This action creates a new release on GitHub and attaches the signed APK/AAB
      # files as assets to that release.
      - name: Create GitHub Release
        # This step only runs if the workflow was triggered by a tag push.
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          # Paths to the signed release files. These outputs are provided by the
          # 'sign-android-release' action.
          files: |
            ${{ steps.sign_app.outputs.signedReleaseFile }}     # Path to the signed AAB file
            ${{ steps.sign_app.outputs.signedReleaseApkFile }} # Path to the signed APK file
          tag_name: ${{ github.ref_name }} # Uses the pushed tag name as the release tag
          name: Release ${{ github.ref_name }} # Uses the pushed tag name as the release title
          body: | # Markdown content for the release description
            ðŸŽ‰ New Release: ${{ github.ref_name }} ðŸŽ‰

            ### What's New:
            (Add your release notes here. You can also automate this by parsing
            a CHANGELOG.md file or commit messages in a prior step.)

            ### Downloads:
            - app-release.aab
            - app-release.apk
          draft: false      # Set to 'true' to create a draft release (not published immediately)
          prerelease: false # Set to 'true' for pre-release versions (e.g., betas)
        env:
          # GITHUB_TOKEN is a special token automatically provided by GitHub Actions
          # with permissions to create releases and upload assets.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Optional Step: Upload Unsigned Artifacts (for debugging or archival purposes).
      # This creates a separate artifact bundle in the workflow run, not attached to the release.
      - name: Upload Unsigned Artifacts (Optional)
        uses: actions/upload-artifact@v4
        with:
          name: Unsigned-APK-AAB
          path: |
            app/build/outputs/apk/release/app-release-unsigned.apk
            app/build/outputs/bundle/release/app-release-unsigned.aab
