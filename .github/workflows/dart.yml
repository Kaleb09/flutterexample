# .github/workflows/windows_desktop_build.yml

name: Flutter Windows Desktop Build

# This workflow will be triggered on:
# - Every push to the 'main' branch
# - Every pull request targeting the 'main' branch
# - Manually via the 'workflow_dispatch' button in the GitHub Actions UI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

# Define a single job specifically for building the Windows desktop application
jobs:
  build_windows:
    name: Build Windows App
    # Runs on the latest available Windows virtual machine provided by GitHub
    runs-on: windows-latest

    steps:
      # Step 1: Checkout the repository code
      # This action retrieves your project's code from the GitHub repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Set up Java Development Kit (JDK)
      # Some Flutter build processes (especially those involving Gradle or native tools)
      # might require a JDK. Using Temurin distribution with Java 17.
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Set up Flutter environment
      # This action installs the Flutter SDK and configures the environment PATH.
      # 'stable' channel is generally recommended for production builds.
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          # Optional: Pin to a specific Flutter version if needed, e.g., flutter-version: '3.19.0'

      # Step 4: Enable Windows desktop support for Flutter
      # This command explicitly configures the Flutter environment on the runner
      # to allow building for Windows desktop.
      - name: Enable Windows Desktop
        run: flutter config --enable-windows-desktop

      # Step 5: Get Flutter package dependencies
      # Downloads all packages listed in your pubspec.yaml file.
      - name: Get Dependencies
        run: flutter pub get

      # Step 6: Run Flutter tests (Optional but highly recommended)
      # This step executes any unit or widget tests in your Flutter project
      # to ensure code quality and prevent regressions.
      - name: Run Tests
        run: flutter test

      # Step 7: Build the Flutter Windows desktop application in release mode
      # This compiles your Dart code and native Windows components into
      # an executable application bundle.
      - name: Build Windows Release App
        run: flutter build windows --release

      # Step 8: Upload the built Windows application as an artifact
      # Artifacts are files generated by a workflow that you can then download.
      # The Windows build output is typically located in `build\windows\runner\Release\`.
      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-release-build # Name of the artifact
          path: build\windows\runner\Release\ # Path to the build output directory
          
